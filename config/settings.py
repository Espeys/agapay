"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'change-me')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', '0') == '1'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'corsheaders',
    'django_celery_beat',
    'django_celery_results',
    'import_export',
    'oauth2_provider',
    'rest_framework',
    'rest_framework_tracking',
    'config',
    # ADD apps.* LIBRARIES BELOW
    'apps.security',
    'apps.home',
    'apps.account',
    'apps.post',
    # 'apps.account.recommendation',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application' # not needed

ASGI_APPLICATION = 'config.asgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

import dj_database_url

_sqlite3_db = 'sqlite:///{}'.format(os.path.join(BASE_DIR, 'db.sqlite3'))

DEFAULT_DB = os.environ.get('DATABASE_URL', _sqlite3_db)

DATABASE_ROUTERS = ['base.routers.GenericRouter']

DATABASES = {
    'default': dj_database_url.parse(DEFAULT_DB),
}

for i in DATABASES.values():
    if i['ENGINE'] == 'django.db.backends.oracle':
        i['OPTIONS'] = {
            'threaded': True
        }


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Manila'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATICFILES_DIRS = []

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATIC_URL = '/static/'


# Media root
# https://docs.djangoproject.com/en/3.0/ref/settings/#media-root

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'


# Logging
# https://docs.python.org/3/library/logging.html

import logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] {%(pathname)s:%(lineno)d} %(levelname)s - %(message)s',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'default': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/debug.log'),
            'when': 'midnight',
            'formatter': 'verbose',
        },
        'info': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/info.log'),
            'when': 'midnight',
            'formatter': 'verbose',
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/error.log'),
            'when': 'midnight',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'default', 'info', 'error'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
    },
}


# Django REST Framework
# https://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': ['rest_framework.renderers.JSONRenderer'],
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    )
}


# Celery
# http://docs.celeryproject.org/en/latest/userguide/configuration.html

from kombu import Queue

BROKER_URL = os.environ.get('BROKER_URL', '')

BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 7200} # 2 hours

CELERY_DEFAULT_QUEUE = 'default'

CELERY_RESULT_BACKEND = 'db+{}'.format(DEFAULT_DB)

CELERY_QUEUES = (
    Queue('default', routing_key='config.instant'),
)


# Configure CHANNELS
# https://channels.readthedocs.io/en/stable/topics/routing.html
# https://github.com/django/channels_redis

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [BROKER_URL],
        }
    }
}



# CORS headers
# https://github.com/ottoyiu/django-cors-headers#configuration

CORS_ORIGIN_ALLOW_ALL = True


# Frontend config
# (no url)

FRONTEND_CONFIG = [
    (TEMPLATES[0]['DIRS'], os.path.join(BASE_DIR, 'frontend/dist/')),
    (STATICFILES_DIRS, os.path.join(BASE_DIR, 'frontend/dist/static')),
]

for cfg, path in FRONTEND_CONFIG:
    if os.path.exists(path):
        cfg.append(path)


# OAUTH SETTINGS
OAUTH2_PROVIDER = {
    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600, # 10 hours
    'REFRESH_TOKEN_EXPIRE_SECONDS': 7200 # 20 hours ... utc - 20hrs
}


# mail
OTP_EXPIRATION_SECONDS = int(os.environ.get('OTP_EXPIRATION_SECONDS', '3600'))


# EMAIL Backends
# https://docs.djangoproject.com/en/3.0/topics/email/
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', '')
EMAIL_HOST = os.environ.get('EMAIL_HOST', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_USE_LOCALTIME = True
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', '0') == '1'

# mobile
DEFAULT_MOBILE_REGION = os.environ.get('DEFAULT_MOBILE_REGION', 'PH')


# number of pagination
NUMBER_OF_PAGINATION = int(os.environ.get('NUMBER_OF_PAGINATION', '15'))


DEFAULT_APPLICATION_MODEL_NAME = os.environ.get('DEFAULT_APPLICATION_MODEL_NAME', 'default')


# FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440 * 4 # 10 mb


GEOIP_PATH = os.path.join(BASE_DIR, 'geoip')


GEO_DEBUG_IP = os.environ.get('GEO_DEBUG_IP', '72.14.207.99') #google
